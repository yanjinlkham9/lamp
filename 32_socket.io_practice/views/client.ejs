<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>chatting: [no DM, no Nickname]</title>
    <!-- socket.io CDN -->
    <script src="/socket.io/socket.io.js"></script>

    <!-- bootstrap CSS CDN -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />

    <style>
      .container {
        background-color: #9bbbd4;
        height: 500px;
        margin-top: 20px;
        /* bootstrap container 기본 padding 없애기 위해 */
        padding: 0;
        display: flex;
        flex-direction: column;
      }

      /***** [HEADER] *****/
      .container header {
        width: 100%;
        box-shadow: 0px 2px 2px #7a7a7a24;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-basis: 10%;
      }

      /***** [SECTION] *****/
      .container section {
        padding: 16px;
        flex-basis: 80%;
        overflow: auto;
      }

      /* section: 스크롤 모양 변경 */
      .container section::-webkit-scrollbar {
        width: 4px;
      }

      .container section::-webkit-scrollbar-thumb {
        background-color: #888;
        border-radius: 10px;
        padding: 1px;
        margin: 1px;
      }

      .container section::-webkit-scrollbar-track {
        padding: 1px;
        background-color: #ccc;
        border-radius: 10px;
        box-shadow: inset 0px 0px 2px white;
      }

      /***** [MSG FORM] *****/
      .container .msg-form {
        display: flex;
        justify-content: space-between;
        bottom: 0;
        padding: 8px 16px;
        flex-basis: 10%;
      }

      .container .msg-form input {
        flex-basis: 80%;
        border: none;
        border-radius: 90px;
        padding: 8px 16px;
        outline: none;
      }

      .container .msg-form input:focus + button {
        background-color: #fef01b;
      }

      .container .msg-form button {
        flex-basis: 15%;
        border: none;
        border-radius: 3px;
      }
      /* section - 말풍선 */
      .container .speech .msg-box {
        display: inline-block;
        box-shadow: 1px 1px 5px #7a7a7a;
        border-radius: 8px;
        padding: 0.3rem;
        margin: 0.5rem 0;
        max-width: 60%;
      }

      .container .speech.me {
        text-align: right;
      }
      .container .speech.other {
        margin: 10px 0;
        position: relative;
      }
      .container .speech.other .nickname {
        font-size: 10px;
        position: absolute;
        top: -8px;
      }
      .container .speech.me .msg-box {
        background-color: #fef01b;
      }
      .container .speech.other .msg-box {
        background-color: white;
      }
      .container section .notice {
        width: 80%;
        background-color: #fff5;
        border-radius: 50px;
        text-align: center;
        padding: 2px 0;
        color: #4449;
        margin: 8px auto;
        font-size: 14px;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <header>코코아톡</header>
      <section>
        <!-- <div class="speech me">
          <span class="msg-box">채팅 내용</span>
        </div>
        <div class="speech other"></div>
        <span class="nickname">nickname</span>
        <span class="msg-box">채팅 내용</span> -->
      </section>
      <form id="msg-form" class="msg-form">
        <input type="text" placeholder="메세지" />
        <button>전송</button>
      </form>
    </div>

    <script>
      const socket = io();
      const chatContainer = document.querySelector(".container section");
      const chatForm = document.querySelector("#msg-form");
      const input = chatForm.querySelector("input");
      //[실습2.] 입장2

      socket.on("notice", (notice) => {
        const p = document.createElement("p");
        p.textContent = notice;
        p.classList.add("notice");
        chatContainer.append(p);
      });

      //[실습4. ] 채팅주고받기
      chatForm.addEventListener("submit", (e) => {
        e.preventDefault();
        if (input.value.trim() === "") return;
        //[4-1] form이 제출시 메세지 서버에게 보내기
        socket.emit("send", input.value);
        input.value = "";
      });

      //   [4-3] 메세지를 전달받고, 내 메세지와 다른 client의 msg-를 구분
      socket.on("message", (data) => {
        //data: {id, message}
        console.log(data);
        console.log(socket.id); //나의 아이디
        console.log(data.id === socket.id);
        const div = document.createElement("div");
        const span = document.createElement("span"); //내용용
        span.innerHTML = data.message;
        span.classList.add("msg-box");
        div.classList.add("speech");

        if (data.id === socket.id) {
          //내가 보낸 메세지지
          div.classList.add("me");
          div.append(span);
        } else {
          //남의 보낸 메세지
          div.classList.add("other");
          const nickname = document.createElement("span");
          nickname.innerText = data.id;
          div.append(nickname, span);
        }
        chatContainer.append(div);
        chatContainer.scrollTop = chatContainer.scrollHeight;
      });
    </script>
  </body>
</html>
